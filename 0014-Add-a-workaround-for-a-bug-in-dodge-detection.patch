From 6fb35eaf1b600373f9ae047b2d2e46bcfc4d1c7e Mon Sep 17 00:00:00 2001
From: Alde Rojas <hello@alde.dev>
Date: Sat, 7 Oct 2023 05:12:04 -0500
Subject: [PATCH] Add a workaround for a bug in dodge detection

The dodge detection in PlayerInput.uc has a bug: if you hold a
directional key, double tap the opposing key, then releasing the initial
key and pressing again triggers a dodge. This is seen in the stock
UT2004 and even after the dodge timer has since expired.

This change remedies that by keeping track of your initial direction and
when your speed is zero from pressing an opposing directional key, it
sets your speed to a very small negative or positive number (effectively
zero) to avoid triggering an edge event.
---
 Engine/Inc/UnIn.h   |  34 ++++++++++++
 Engine/Src/UnIn.cpp | 122 +++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 154 insertions(+), 2 deletions(-)

diff --git a/Engine/Inc/UnIn.h b/Engine/Inc/UnIn.h
index 5f50c86..0b4700f 100644
--- a/Engine/Inc/UnIn.h
+++ b/Engine/Inc/UnIn.h
@@ -44,6 +44,36 @@ struct FAlias
 #pragma pack(pop)
 #endif
 
+#define AXISSTATE_NONE 0x00
+#define AXISSTATE_PLUS 0x01
+#define AXISSTATE_MINUS 0x02
+#define AXISSTATE_PLUSMINUS 0x03
+
+//
+// Axis state machine to workaround a bug in the dodge detection algorithm.
+//
+struct FAxisStateMachine
+{
+	FName Name;
+	BYTE State;
+	BYTE OldState;
+
+	FAxisStateMachine(FName InName, BYTE InState)
+	: Name(InName), State(InState), OldState(AXISSTATE_NONE)
+	{}
+
+	void Feed(FLOAT value) {
+		if (value > 0.0f)
+			State |= AXISSTATE_PLUS;
+		else if (value < 0.0f)
+			State |= AXISSTATE_MINUS;
+	}
+
+	void Clear();
+	void Reset();
+	FLOAT Value(FLOAT Current);
+};
+
 //
 // The input system base class.
 //
@@ -101,6 +131,10 @@ protected:
 	virtual FLOAT* FindAxisName( AActor* Actor, const TCHAR* ButtonName ) const;
 	virtual void ExecInputCommands( const TCHAR* Cmd, FOutputDevice& Ar );
 	static const TCHAR* StaticConfigName() {return TEXT("User");}
+
+	TArray<FAxisStateMachine> Axes;
+	virtual FAxisStateMachine& GetAxisStateMachine(const TCHAR* ButtonName);
+	virtual INT FindAxisStateMachine(FName Name);
 };
 
 #include "UnForcePacking_end.h"
diff --git a/Engine/Src/UnIn.cpp b/Engine/Src/UnIn.cpp
index 3c80ebe..91c50a2 100644
--- a/Engine/Src/UnIn.cpp
+++ b/Engine/Src/UnIn.cpp
@@ -38,6 +38,77 @@ public:
 	}
 };
 
+void FAxisStateMachine::Clear()
+{
+	OldState = State = AXISSTATE_NONE;
+}
+
+void FAxisStateMachine::Reset()
+{
+	State = AXISSTATE_NONE;
+}
+
+FLOAT FAxisStateMachine::Value(FLOAT Current)
+{
+	guard(FAxisStateMachine::Value);
+	FLOAT NewValue = Current;
+
+	// Determine state and speed depending on the last state. This is to ensure
+	// that the dodge detection code in PlayerInput.uc properly triggers on
+	// actual edge events and not errorneous events caused by pressing an
+	// opposing key.
+	switch (OldState)
+	{
+	case AXISSTATE_NONE:
+		switch (State)
+		{
+		case AXISSTATE_NONE:
+		case AXISSTATE_PLUSMINUS:
+			NewValue = 0.0;
+			goto done;
+		default:
+			OldState = State;
+			goto done;
+		}
+	case AXISSTATE_PLUS:
+		switch (State)
+		{
+		case AXISSTATE_NONE:
+			NewValue = 0.0;
+		case AXISSTATE_MINUS:
+		case AXISSTATE_PLUS:
+			OldState = State;
+			goto done;
+		case AXISSTATE_PLUSMINUS:
+			// When the opposing key is pressed, keep a very small positive
+			// direction to avoid triggering an edge event in the dodge
+			// detection.
+			NewValue = (FLOAT)+0.0001;
+			goto done;
+		}
+	case AXISSTATE_MINUS:
+		switch (State)
+		{
+		case AXISSTATE_NONE:
+			NewValue = 0.0;
+		case AXISSTATE_MINUS:
+		case AXISSTATE_PLUS:
+			OldState = State;
+			goto done;
+		case AXISSTATE_PLUSMINUS:
+			// When the opposing key is pressed, keep a very small negative
+			// direction to avoid triggering an edge event in the dodge
+			// detection.
+			NewValue = (FLOAT)-0.0001;
+			goto done;
+		}
+	}
+
+done:
+	return NewValue;
+	unguard;
+}
+
 /*-----------------------------------------------------------------------------
 	Implementation.
 -----------------------------------------------------------------------------*/
@@ -174,6 +245,32 @@ FLOAT* UInput::FindAxisName( AActor* Actor, const TCHAR* ButtonName ) const
 	unguard;
 }
 
+FAxisStateMachine& UInput::GetAxisStateMachine(const TCHAR* ButtonName)
+{
+	guard(UInput::GetAxisStateMachine);
+	FName Name = FName(ButtonName, FNAME_Find);
+
+	INT i = FindAxisStateMachine(Name);
+	if (i >= 0)
+		return Axes(i);
+
+	i = Axes.AddItem(FAxisStateMachine(Name, AXISSTATE_NONE));
+	return Axes(i);
+	unguard;
+}
+
+INT UInput::FindAxisStateMachine(FName Name)
+{
+	guard(UInput::FindAxisStateMachine);
+	INT i;
+	for (i = 0; i < Axes.Num(); i++)
+		if (Axes(i).Name == Name)
+			return i;
+
+	return -1;
+	unguard;
+}
+
 //
 // Execute input commands.
 //
@@ -231,6 +328,7 @@ void UInput::Init( UViewport* InViewport )
     bAltMode = 0; //amb
     bUseAltDef = 0; //amb
 	ResetInput();
+	Axes.Empty();
 
 	debugf( NAME_Init, TEXT("Input system initialized for %s"), Viewport->GetName() );
 	unguard;
@@ -382,6 +480,7 @@ UBOOL UInput::Exec( const TCHAR* Str, FOutputDevice& Ar )
 				else if( GetInputAction() == IST_Hold )
 				{
 					*Axis += GetInputDelta() * Speed * Invert;
+					GetAxisStateMachine(Temp).Feed(Speed * Invert);
 				}
 			}
 		}
@@ -679,11 +778,17 @@ void UInput::ReadInput( FLOAT DeltaSeconds, FOutputDevice& Ar )
 		FMemCache::FCacheItem*     Item  = NULL;
 		FInputVarCache* Cache = FInputVarCache::Get( Viewport->Actor->GetClass(), Item );
 
-		// Update everything with IST_Hold.
 		if( DeltaSeconds!=-1.f )
+		{
+			// Reset axes states
+			for (INT i = 0; i < Axes.Num(); i++)
+				Axes(i).Reset();
+
+			// Update everything with IST_Hold.
 			for( INT i=0; i<IK_MAX; i++ )
 				if( KeyDownTable[i] )
 					Process( *GLog, (EInputKey)i, IST_Hold, DeltaSeconds );
+		}
 
 		// Scale the axes.
 // amb ---
@@ -695,8 +800,21 @@ void UInput::ReadInput( FLOAT DeltaSeconds, FOutputDevice& Ar )
 // --- amb
 
 		for( INT i=0; i<Cache->Count; i++ )
+		{
 			if( Cast<UFloatProperty>(Cache->Properties[i]) )
-				*(FLOAT*)((BYTE*)Viewport->Actor + Cache->Properties[i]->Offset) *= Scale;
+			{
+				FLOAT* Value = (FLOAT*)((BYTE*)Viewport->Actor + Cache->Properties[i]->Offset);
+				*Value *= Scale;
+
+				// Adjust axes for dodge detection code
+				if ( DeltaSeconds!=-1.f )
+				{
+					INT j = FindAxisStateMachine(Cache->Properties[i]->GetFName());
+					if (j >= 0)
+						*Value = Axes(j).Value(*Value);
+				}
+			}
+		}
 
 		Item->Unlock();
 	}
-- 
2.31.1.windows.1


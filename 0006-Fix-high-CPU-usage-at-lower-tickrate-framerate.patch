From eabc26289e784c6eef82c687853b86955283aff4 Mon Sep 17 00:00:00 2001
From: Alde Rojas <hello@alde.dev>
Date: Wed, 27 Sep 2023 18:30:49 -0500
Subject: [PATCH] Fix high CPU usage at lower tickrate/framerate

The previous implementation yielded the CPU in a busy loop for the
desired wait time. That is not ideal at low framerate, as it will still
report the process as having high CPU usage. This fixes that by
performing a Sleep() for the majority of the time and then finishing up
with the busy loop.
---
 Core/Src/UnVcWin32.cpp   |  7 ++++---
 Engine/Inc/UnEngineWin.h | 16 ++++++++++++++--
 2 files changed, 18 insertions(+), 5 deletions(-)

diff --git a/Core/Src/UnVcWin32.cpp b/Core/Src/UnVcWin32.cpp
index 38c72f1..213209c 100644
--- a/Core/Src/UnVcWin32.cpp
+++ b/Core/Src/UnVcWin32.cpp
@@ -787,10 +787,11 @@ CORE_API DWORD appCycles()
 CORE_API void appSleep( FLOAT Seconds )
 {
 	guard(appSleep);
-	DOUBLE start = appSeconds();
-	do {
+	if (Seconds == 0.0f) {
 		SwitchToThread();
-	} while (appSeconds() - start < Seconds);
+	} else {
+		Sleep((DWORD)(Seconds * 1000.0));
+	}
 	unguard;
 }
 
diff --git a/Engine/Inc/UnEngineWin.h b/Engine/Inc/UnEngineWin.h
index 86306f6..286bc11 100644
--- a/Engine/Inc/UnEngineWin.h
+++ b/Engine/Inc/UnEngineWin.h
@@ -1016,8 +1016,20 @@ inline void	CMainLoop::RunLoop(void)
 		FLOAT MaxTickRate = Engine->GetMaxTickRate();
 		if( MaxTickRate>0.0 )
 		{
-			FLOAT Delta = (1.0/MaxTickRate) - (appSeconds()-OldTime);
-			appSleep( Max(0.f,Delta) );
+			DOUBLE CurrentTime = appSeconds();
+			FLOAT WaitTime = (1.0/MaxTickRate) - (CurrentTime-OldTime);
+			DOUBLE EndTime = CurrentTime + WaitTime;
+
+			// If waiting over 5ms, then wait for the majority of the time but
+			// give 2ms of slack.
+			if (WaitTime > 5 / 1000.0f) {
+				appSleep(WaitTime - 0.002);
+			}
+
+			// Yield CPU until we reach desired end time
+			do {
+				appSleep(0.0f);
+			} while (appSeconds() < EndTime);
 		}
 	}
 	unguard;
-- 
2.31.1.windows.1


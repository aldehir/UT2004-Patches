From 73eefde577aef10c0a3a5c67c925124f0b8dd703 Mon Sep 17 00:00:00 2001
From: Alde Rojas <hello@alde.dev>
Date: Thu, 5 Oct 2023 22:13:25 -0500
Subject: [PATCH] Fix "auto-dodging" regression

Moving the message pump inside tick enforcement caused the unintended
consequence of delaying keyboard message processing. This would cause
"auto-dodging" as key events were slightly delayed, especially at lower
framerates. This moves all input processing into the viewport class
right before the call to the player controller's `PlayerTick()`
function.
---
 Engine/Inc/UnCamera.h      |  1 -
 Engine/Inc/UnEngineWin.h   | 27 +++++++--------------------
 Engine/Src/UnCamMgr.cpp    |  7 -------
 WinDrv/Inc/WinDrv.h        |  3 ++-
 WinDrv/Src/WinRawInput.cpp | 21 ---------------------
 WinDrv/Src/WinViewport.cpp | 37 +++++++++++++++++++++++++++++++++++++
 6 files changed, 46 insertions(+), 50 deletions(-)

diff --git a/Engine/Inc/UnCamera.h b/Engine/Inc/UnCamera.h
index d6b43e5..a8752ee 100644
--- a/Engine/Inc/UnCamera.h
+++ b/Engine/Inc/UnCamera.h
@@ -530,7 +530,6 @@ class ENGINE_API UClient : public UObject
 	virtual void MakeCurrent( UViewport* NewViewport )=0;
 	virtual UViewport* GetLastCurrent()=0;
 	virtual void TeardownSR()=0;
-	virtual UBOOL SuppressRawMessages();
 
     // gam ---
     INT GetTextureLODBias (ELODSet LODSet);
diff --git a/Engine/Inc/UnEngineWin.h b/Engine/Inc/UnEngineWin.h
index 50e4310..8a58dce 100644
--- a/Engine/Inc/UnEngineWin.h
+++ b/Engine/Inc/UnEngineWin.h
@@ -963,29 +963,13 @@ inline void	CMainLoop::RunLoop(void)
 		guard(MessagePump);
 		MSG Msg;
 
-		for (;;)
-		{
-			if ( Engine->Client->SuppressRawMessages() )
-			{
-				if (!PeekMessageX(&Msg, NULL, 0, WM_INPUT-1, PM_REMOVE)
-					&& !PeekMessageX(&Msg, NULL, WM_INPUT+1, (UINT)-1, PM_REMOVE))
-				{
-					break;
-				}
-			}
-			else if (!PeekMessageX(&Msg,NULL,0,0,PM_REMOVE))
-			{
-				break;
-			}
+		// If we're not the editor, only handle non-input messages.
+		UINT flags = GIsEditor ? 0 : PM_QS_PAINT | PM_QS_POSTMESSAGE | PM_QS_SENDMESSAGE;
 
+		while ( PeekMessageX( &Msg, NULL, 0, 0, PM_REMOVE | flags ))
+		{
 			if( Msg.message == WM_QUIT )
-			{
-				// When closing down the editor, check to see if there are any unsaved dirty packages.
-				if( GIsEditor )
-					SaveDirtyPackages( Engine );
-
 				GIsRequestingExit = 1;
-			}
 
 			guard(TranslateMessage);
 			TranslateMessage( &Msg );
@@ -1069,6 +1053,9 @@ inline void	CMainLoop::RunLoop(void)
 			BMFrameTimes( BMStringsIndex - 1 ) = GStats.DWORDStats( GEngineStats.STATS_Frame_TotalCycles ) * GSecondsPerCycle * 1000.f;
 		}
 	}
+
+	if ( GIsRequestingExit && GIsEditor )
+		SaveDirtyPackages(Engine);
 }
 
 inline CMainLoop::~CMainLoop(void)
diff --git a/Engine/Src/UnCamMgr.cpp b/Engine/Src/UnCamMgr.cpp
index 362b578..485ff1e 100644
--- a/Engine/Src/UnCamMgr.cpp
+++ b/Engine/Src/UnCamMgr.cpp
@@ -239,13 +239,6 @@ INT UClient::GetTextureLODBias (ELODSet LODSet)
 	unguard;
 }
 
-UBOOL UClient::SuppressRawMessages()
-{
-	guard(UClient::SuppressRawMessages);
-	return false;
-	unguard;
-}
-
 IMPLEMENT_CLASS(UClient);
 
 /*-----------------------------------------------------------------------------
diff --git a/WinDrv/Inc/WinDrv.h b/WinDrv/Inc/WinDrv.h
index 668c216..bdd0fa1 100644
--- a/WinDrv/Inc/WinDrv.h
+++ b/WinDrv/Inc/WinDrv.h
@@ -243,6 +243,7 @@ class DLL_EXPORT UWindowsViewport : public UViewport
 	static BOOL    CALLBACK EnumAxesCallback( const DIDEVICEOBJECTINSTANCE* pdidoi, VOID* pContext );
 
 	virtual UBOOL FireWallHack(INT Cmd);
+	void PumpInputMessages();
 };
 
 //
@@ -291,6 +292,7 @@ class DLL_EXPORT UWindowsInputHandler : public UObject
 	virtual void Acquire() {}
 	virtual void Unacquire() {}
 
+	virtual UBOOL SuppressRawMessages() { return GetOuterUWindowsInput()->SuppressRawMessages(); }
 	virtual UBOOL HandleWindowMessage(UINT iMessage, WPARAM wParam, LPARAM lParam) { return false; }
 
 	// Helper functions
@@ -364,7 +366,6 @@ class DLL_EXPORT UWindowsRawInputHandler : public UWindowsInputHandler
 	DECLARE_CLASS(UWindowsRawInputHandler,UWindowsInputHandler,CLASS_Transient,WinDrv)
 	DECLARE_WITHIN(UWindowsRawInput);
 
-	void UpdateInput(FLOAT DeltaSeconds);
 	UBOOL HandleWindowMessage(UINT iMessage, WPARAM wParam, LPARAM lParam);
 
 	void Acquire() { RegisterDevice(false); }
diff --git a/WinDrv/Src/WinRawInput.cpp b/WinDrv/Src/WinRawInput.cpp
index 3183f93..1454f0d 100644
--- a/WinDrv/Src/WinRawInput.cpp
+++ b/WinDrv/Src/WinRawInput.cpp
@@ -30,27 +30,6 @@ void UWindowsRawInputHandler::RegisterDevice(UBOOL WithLegacy)
 	unguard;
 }
 
-void UWindowsRawInputHandler::UpdateInput(FLOAT DeltaSeconds)
-{
-	guard(UWindowsRawInputHandler::UpdateInput);
-
-	// Raw Input is sent through the WM_INPUT message, so we have to message
-	// pump to feed input
-	MSG Msg;
-	while (PeekMessageX(&Msg, NULL, 0, 0, PM_REMOVE | PM_QS_INPUT))
-	{
-		if (Msg.message == WM_QUIT)
-		{
-			GIsRequestingExit = 1;
-		}
-
-		TranslateMessage(&Msg);
-		DispatchMessageX(&Msg);
-	}
-
-	unguard;
-}
-
 UBOOL UWindowsRawInputHandler::HandleWindowMessage(UINT iMessage, WPARAM wParam, LPARAM lParam)
 {
 	guard(UWindowsRawInputHandler::HandleWindowMessage);
diff --git a/WinDrv/Src/WinViewport.cpp b/WinDrv/Src/WinViewport.cpp
index 5bedf51..956d395 100644
--- a/WinDrv/Src/WinViewport.cpp
+++ b/WinDrv/Src/WinViewport.cpp
@@ -946,6 +946,9 @@ void UWindowsViewport::UpdateInput( UBOOL Reset, FLOAT DeltaSeconds )
 		SetKeyboardState(KeyStates);
 	}
 
+	// Drain input messages from the message queue
+	PumpInputMessages();
+
 	InputHandler->UpdateInput(DeltaSeconds);
 
 	ProcessedInput[IK_LeftMouse]	= 1;
@@ -981,6 +984,40 @@ void UWindowsViewport::UpdateInput( UBOOL Reset, FLOAT DeltaSeconds )
 	unguard;
 }
 
+void UWindowsViewport::PumpInputMessages()
+{
+	guard(UWindowsViewport::PumpInputMessages);
+	MSG Msg;
+
+	for (;;)
+	{
+		if ( InputHandler->SuppressRawMessages() )
+		{
+			if (!PeekMessageX(&Msg, NULL, 0, WM_INPUT-1, PM_REMOVE | PM_QS_INPUT)
+				&& !PeekMessageX(&Msg, NULL, WM_INPUT+1, (UINT)-1, PM_REMOVE | PM_QS_INPUT))
+			{
+				break;
+			}
+		}
+		else if (!PeekMessageX(&Msg, NULL, 0, 0, PM_REMOVE | PM_QS_INPUT))
+		{
+			break;
+		}
+
+		if(Msg.message == WM_QUIT)
+			GIsRequestingExit = 1;
+
+		guard(TranslateMessage);
+		TranslateMessage(&Msg);
+		unguardf((TEXT("%08X %i"), (INT)((PTRINT)Msg.hwnd), Msg.message));
+
+		guard(DispatchMessage);
+		DispatchMessageX(&Msg);
+		unguardf((TEXT("%08X %i"), (INT)((PTRINT)Msg.hwnd), Msg.message));
+	}
+	unguard;
+}
+
 void UWindowsViewport::UpdateMousePosition()
 {
 	guard(UWindowsViewport::UpdateMousePosition);
-- 
2.31.1.windows.1

